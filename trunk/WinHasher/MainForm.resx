<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="singleTabPage.ToolTip" xml:space="preserve">
    <value>This tab can be used to compute the hash of
an individual file.  This can be useful for validating
downloads or checking to see if a file has been
tampered with.  Select a file and put its path in
the File to hash text box, then click the Compute
Hash button.  The generated hash will appear in
the Hash text box.  To change the hashing
algorithm, select a different hash from the drop-
down box at the bottom of the form.</value>
  </data>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="hashSingleTextBox.ToolTip" xml:space="preserve">
    <value>This text box contains the resulting hash computed
on the file whose path is in the text box above,
using the hashing algorithm specified below.  You
can copy this value and paste it anywhere you
like, such as to a text file, HTML page, or other
document.</value>
  </data>
  <data name="compareTabPage.ToolTip" xml:space="preserve">
    <value>This tab can be used to compare two or more files
to see if they are the same.  It does this by
calculating the hash fo each file and comparing
them.  Select one or more files by clicking the Add
button and picking files from the list, or drag and
drop files directly on to the tab.  Then select a
hashing algorithm from the drop-down list on the
bottom of the form and click the Compare Hashes
button.  This comparison is an all-or-nothing check;
if any does not match any of the others, the entire
batch is said to fail.</value>
  </data>
  <data name="compareFilesListBox.ToolTip" xml:space="preserve">
    <value>This is the list of currently selected files to compare.
To add more files to this list, click the Add button and
select as many files as you would like.  You can also
drag files from somewhere else and drop them onto
this tab to add them to the list.</value>
  </data>
  <data name="textTabPage.ToolTip" xml:space="preserve">
    <value>This tab can be used to compute the hash of
an a simple text string.  Enter the text in the
Text to hash box, then choose the encoding
for the text.  Then click the hash button.  The
text will be converted to raw binary data using
the chosen encoding and hashed to produce
the output.</value>
  </data>
  <data name="hashComboBox.ToolTip" xml:space="preserve">
    <value>This drop-down list contains the available hashing
algorithms on this system.  Select a hashing
algorithm from the list to change which one to
use.  The default is MD5, although it is not
recommended for extensive use as MD5 has been
proven to have collisions.  The higher SHA
algorithms are considered more secure.</value>
  </data>
  <data name="outputFormatComboBox.ToolTip" xml:space="preserve">
    <value>This drop-down list allows you to change the
hash output format. Most hashes are
displayed in hexadecimal, but Base64 has
 the advantage of being slightly more compact
while Bubble Babble makes "words" that are
easier to pronounce vocally than raw hex.
The default is hexadecimal using lower-case
letters.  To get hex output with upper-case
letters, choose "Hex (Caps)".</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>44</value>
  </metadata>
</root>