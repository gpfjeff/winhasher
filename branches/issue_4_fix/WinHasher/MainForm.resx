<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolTip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="compareToTextBox.ToolTip" xml:space="preserve">
    <value>Paste a pre-computed hash from another
source (such as a Web site) into this field
and WinHasher will compare its result with
the entered value.  A colored label will
appear above the Hash text box indicating
whether the two hashes match or not.
</value>
  </data>
  <data name="hashSingleTextBox.ToolTip" xml:space="preserve">
    <value>This text box contains the resulting hash computed
on the file whose path is in the text box above,
using the hashing algorithm specified below.  You
can copy this value and paste it anywhere you
like, such as to a text file, HTML page, or other
document.</value>
  </data>
  <data name="singleTabPage.ToolTip" xml:space="preserve">
    <value>This tab can be used to compute the hash of
an individual file.  This can be useful for validating
downloads or checking to see if a file has been
tampered with.  Select a file and put its path in
the File to hash text box, then click the Compute
Hash button.  The generated hash will appear in
the Hash text box.  To change the hashing
algorithm, select a different hash from the drop-
down box at the bottom of the form.</value>
  </data>
  <data name="compareFilesListBox.ToolTip" xml:space="preserve">
    <value>This is the list of currently selected files to compare.
To add more files to this list, click the Add button and
select as many files as you would like.  You can also
drag files from somewhere else and drop them onto
this tab to add them to the list.</value>
  </data>
  <data name="compareTabPage.ToolTip" xml:space="preserve">
    <value>This tab can be used to compare two or more files
to see if they are the same.  It does this by
calculating the hash fo each file and comparing
them.  Select one or more files by clicking the Add
button and picking files from the list, or drag and
drop files directly on to the tab.  Then select a
hashing algorithm from the drop-down list on the
bottom of the form and click the Compare Hashes
button.  This comparison is an all-or-nothing check;
if any does not match any of the others, the entire
batch is said to fail.</value>
  </data>
  <data name="textTabPage.ToolTip" xml:space="preserve">
    <value>This tab can be used to compute the hash of
an a simple text string.  Enter the text in the
Text to hash box, then choose the encoding
for the text.  Then click the hash button.  The
text will be converted to raw binary data using
the chosen encoding and hashed to produce
the output.</value>
  </data>
  <data name="hashComboBox.ToolTip" xml:space="preserve">
    <value>This drop-down list contains the available hashing
algorithms on this system.  Select a hashing
algorithm from the list to change which one to
use.  The default is SHA-1; MD5 used to be the
default but is not recommended for extensive
use as it has been proven to have collisions.</value>
  </data>
  <data name="outputFormatComboBox.ToolTip" xml:space="preserve">
    <value>This drop-down list allows you to change the
hash output format. Most hashes are
displayed in hexadecimal, but Base64 has
the advantage of being slightly more compact
while Bubble Babble makes "words" that are
easier to pronounce vocally.  The default is
hexadecimal using lower-case letters.  To
get hex output with upper-case letters,
choose "Hex (Caps)".</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>44</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAQAEBAQAAAABAAoAQAARgAAACAgEAAAAAQA6AIAAG4BAAAgIAAAAAAIAKgIAABWBAAAEBAAAAAA
        CABoBQAA/gwAACgAAAAQAAAAIAAAAAEABAAAAAAAgAAAAAAAAAAAAAAAEAAAABAAAAAAAAAAAACAAACA
        AAAAgIAAgAAAAIAAgACAgAAAgICAAMDAwAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AAD///8AAAAAAAAA
        AAAJmQAHmRAAAAmZEAeZkAAAB5kQAJmQAAAHmZAAmZEAAJmZmZmZmZmRd3mZd3mZd3AACZkACZkAAAAJ
        mRAJmRAAAAeZEAmZEAAREZkRGZkREJmZmZmZmZmRAACZkQCZkQAAAHmRAAmRAAAAeZkACZkQAAAJmQAH
        mRD//wAAjh8AAIYfAACHHwAAhw8AAAAAAAAAAQAA448AAOGHAADhhwAAAAEAAAAAAADwwwAA8OMAAPDh
        AAD44QAAKAAAACAAAABAAAAAAQAEAAAAAAAAAgAAAAAAAAAAAAAQAAAAEAAAAAAAAAAAAIAAAIAAAACA
        gACAAAAAgACAAICAAACAgIAAwMDAAAAA/wAA/wAAAP//AP8AAAD/AP8A//8AAP///wAAAAAAAAAAAAAA
        AAAAAAAAABERERAAAAAREREAAAAAAAB5mZkQAAAHmZmRAAAAAAAAeZmZkQAAB5mZmRAAAAAAAHmZmZEA
        AAeZmZkQAAAAAAAHmZmRAAAAeZmZEAAAAAAAB5mZkQAAAHmZmRAAAAAAAAeZmZkQAAB5mZmRAAAAAAAH
        mZmZEAAAeZmZkQAAAAABERmZmRERERmZmZEREREQeZmZmZmZmZmZmZmZmZmZkXmZmZmZmZmZmZmZmZmZ
        mZEHd3d5mZkXd3eZmZkXd3dwAAAAeZmZEAAAmZmZEAAAAAAAAHmZmRAAAJmZmRAAAAAAAAB5mZkRAACZ
        mZkQAAAAAAAAeZmZkQAAmZmZkQAAAAAAAHmZmZEAAJmZmZEAAAAAAAAHmZmRAAAJmZmRAAAAAAAAB5mZ
        kQAACZmZkQAAAAERERGZmZERERmZmZERERB5mZmZmZmZmZmZmZmZmZmReZmZmZmZmZmZmZmZmZmZkQd3
        d3d5mZmRd3d5mZmZd3AAAAAAeZmZkQAAeZmZkQAAAAAAAHmZmZEAAHd5mZEAAAAAAAAHmZmRAAAAeZmR
        AAAAAAAAB5mZkQAAAHmZkQAAAAAAAAeZmZkQAAB5mZkRAAAAAAAHmZmZEAAAd5mZkQAAAAAAAHmZmRAA
        AAeZmZEAAAAAAAB3d3cAAAAHd3cAAP/////AfwP/wH4D/8A+Af/APgH/4D8B/+A/Af/gHwD/4B8A/4AA
        AAEAAAAAAAAAAIAAAAH8B8B//AfAf/wDwH/8A8A//APAP/4D4D/+A+A/gAAAAQAAAAAAAAAAgAAAAf8A
        8A//APAP/4D8D/+A/A//gHwD/4B8A//AfgP/wP4PKAAAACAAAABAAAAAAQAIAAAAAAAABAAAAAAAAAAA
        AAAAAQAAAAEAAAAAAAAAAIAAAIAAAACAgACAAAAAgACAAICAAADAwMAAwNzAAPDKpgAEBAQACAgIAAwM
        DAAREREAFhYWABwcHAAiIiIAKSkpAFVVVQBNTU0AQkJCADk5OQCAfP8AUFD/AJMA1gD/7MwAxtbvANbn
        5wCQqa0AAAAzAAAAZgAAAJkAAADMAAAzAAAAMzMAADNmAAAzmQAAM8wAADP/AABmAAAAZjMAAGZmAABm
        mQAAZswAAGb/AACZAAAAmTMAAJlmAACZmQAAmcwAAJn/AADMAAAAzDMAAMxmAADMmQAAzMwAAMz/AAD/
        ZgAA/5kAAP/MADMAAAAzADMAMwBmADMAmQAzAMwAMwD/ADMzAAAzMzMAMzNmADMzmQAzM8wAMzP/ADNm
        AAAzZjMAM2ZmADNmmQAzZswAM2b/ADOZAAAzmTMAM5lmADOZmQAzmcwAM5n/ADPMAAAzzDMAM8xmADPM
        mQAzzMwAM8z/ADP/MwAz/2YAM/+ZADP/zAAz//8AZgAAAGYAMwBmAGYAZgCZAGYAzABmAP8AZjMAAGYz
        MwBmM2YAZjOZAGYzzABmM/8AZmYAAGZmMwBmZmYAZmaZAGZmzABmmQAAZpkzAGaZZgBmmZkAZpnMAGaZ
        /wBmzAAAZswzAGbMmQBmzMwAZsz/AGb/AABm/zMAZv+ZAGb/zADMAP8A/wDMAJmZAACZM5kAmQCZAJkA
        zACZAAAAmTMzAJkAZgCZM8wAmQD/AJlmAACZZjMAmTNmAJlmmQCZZswAmTP/AJmZMwCZmWYAmZmZAJmZ
        zACZmf8AmcwAAJnMMwBmzGYAmcyZAJnMzACZzP8Amf8AAJn/MwCZzGYAmf+ZAJn/zACZ//8AzAAAAJkA
        MwDMAGYAzACZAMwAzACZMwAAzDMzAMwzZgDMM5kAzDPMAMwz/wDMZgAAzGYzAJlmZgDMZpkAzGbMAJlm
        /wDMmQAAzJkzAMyZZgDMmZkAzJnMAMyZ/wDMzAAAzMwzAMzMZgDMzJkAzMzMAMzM/wDM/wAAzP8zAJn/
        ZgDM/5kAzP/MAMz//wDMADMA/wBmAP8AmQDMMwAA/zMzAP8zZgD/M5kA/zPMAP8z/wD/ZgAA/2YzAMxm
        ZgD/ZpkA/2bMAMxm/wD/mQAA/5kzAP+ZZgD/mZkA/5nMAP+Z/wD/zAAA/8wzAP/MZgD/zJkA/8zMAP/M
        /wD//zMAzP9mAP//mQD//8wAZmb/AGb/ZgBm//8A/2ZmAP9m/wD//2YAIQClAF9fXwB3d3cAhoaGAJaW
        lgDLy8sAsrKyANfX1wDd3d0A4+PjAOrq6gDx8fEA+Pj4APD7/wCkoKAAgICAAAAA/wAA/wAAAP//AP8A
        AAD/AP8A//8AAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoKCgAAJCQkJCQkJAAAAAAA
        AAAkJCQkJCQAAAAAAAAACgoKAADj+fn5+fkkAAAAAAAA4/n5+fn5JAAAAAAAAAAKCgoAAOP5+fn5+fkk
        AAAAAADj+fn5+fn5JAAAAAAAAAoKCgAA4/n5+fn5+SQAAAAAAOP5+fn5+fkkAAAAAAAACgoKAAAA4/n5
        +fn5JAAAAAAAAOP5+fn5+SQAAAAAAAAKCgoAAADj+fn5+fkkAAAAAAAA4/n5+fn5JAAAAAAAAAoKCgAA
        AOP5+fn5+fkkAAAAAADj+fn5+fn5JAAAAAAACgoKAAAA4/n5+fn5+SQAAAAAAOP5+fn5+fkkAAAAAAAK
        CgoAJCQkJPn5+fn5JCQkJCQkJPn5+fn5+SQkJCQkJCQkCuP5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5
        +fn5+fkk4/n5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+SQA4+Pj4+Pj+fn5+fkk4+Pj4+P5+fn5
        +fkk4+Pj4+PjCgAAAAAAAOP5+fn5+SQAAAAAAPn5+fn5+SQAAAAACgoKAAAAAAAA4/n5+fn5JAAAAAAA
        +fn5+fn5JAAAAAAKCgoAAAAAAADj+fn5+fkkJAAAAAD5+fn5+fkkAAAAAAoKCgAAAAAAAOP5+fn5+fkk
        AAAAAPn5+fn5+fkkAAAACgoKAAAAAAAA4/n5+fn5+SQAAAAA+fn5+fn5+SQAAAAKCgoAAAAAAAAA4/n5
        +fn5JAAAAAAA+fn5+fn5JAAAAAoKCgAAAAAAAADj+fn5+fkkAAAAAAD5+fn5+fkkAAAACgoKACQkJCQk
        JCT5+fn5+SQkJCQkJPn5+fn5+SQkJCQkJArj+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5JOP5
        +fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fkkAOPj4+Pj4+Pj+fn5+fn5JOPj4+Pj+fn5+fn5+ePj
        4woAAAAAAAAAAOP5+fn5+fkkAAAAAOP5+fn5+fkkAAoKCgAAAAAAAAAA4/n5+fn5+SQAAAAA4+Pj+fn5
        +SQACgoKAAAAAAAAAAAA4/n5+fn5JAAAAAAAAOP5+fn5JAAKCgoAAAAAAAAAAADj+fn5+fkkAAAAAAAA
        4/n5+fkkAAoKCgAAAAAAAAAAAOP5+fn5+fkkAAAAAADj+fn5+fkkJAoKAAAAAAAAAAAA4/n5+fn5+SQA
        AAAAAOPj+fn5+fkkCgoAAAAAAAAAAAAA4/n5+fn5JAAAAAAAAOP5+fn5+SQKCgAAAAAAAAAAAADj4+Pj
        4+MAAAAAAAAA4+Pj4+MACgoK/////8B/A//AfgP/wD4B/8A+Af/gPwH/4D8B/+AfAP/gHwD/gAAAAQAA
        AAAAAAAAgAAAAfwHwH/8B8B//APAf/wDwD/8A8A//gPgP/4D4D+AAAABAAAAAAAAAACAAAAB/wDwD/8A
        8A//gPwP/4D8D/+AfAP/gHwD/8B+A//A/g8oAAAAEAAAACAAAAABAAgAAAAAAAABAAAAAAAAAAAAAAAB
        AAAAAQAAAAAAAAAAgAAAgAAAAICAAIAAAACAAIAAgIAAAMDAwADA3MAA8MqmAAQEBAAICAgADAwMABER
        EQAWFhYAHBwcACIiIgApKSkAVVVVAE1NTQBCQkIAOTk5AIB8/wBQUP8AkwDWAP/szADG1u8A1ufnAJCp
        rQAAADMAAABmAAAAmQAAAMwAADMAAAAzMwAAM2YAADOZAAAzzAAAM/8AAGYAAABmMwAAZmYAAGaZAABm
        zAAAZv8AAJkAAACZMwAAmWYAAJmZAACZzAAAmf8AAMwAAADMMwAAzGYAAMyZAADMzAAAzP8AAP9mAAD/
        mQAA/8wAMwAAADMAMwAzAGYAMwCZADMAzAAzAP8AMzMAADMzMwAzM2YAMzOZADMzzAAzM/8AM2YAADNm
        MwAzZmYAM2aZADNmzAAzZv8AM5kAADOZMwAzmWYAM5mZADOZzAAzmf8AM8wAADPMMwAzzGYAM8yZADPM
        zAAzzP8AM/8zADP/ZgAz/5kAM//MADP//wBmAAAAZgAzAGYAZgBmAJkAZgDMAGYA/wBmMwAAZjMzAGYz
        ZgBmM5kAZjPMAGYz/wBmZgAAZmYzAGZmZgBmZpkAZmbMAGaZAABmmTMAZplmAGaZmQBmmcwAZpn/AGbM
        AABmzDMAZsyZAGbMzABmzP8AZv8AAGb/MwBm/5kAZv/MAMwA/wD/AMwAmZkAAJkzmQCZAJkAmQDMAJkA
        AACZMzMAmQBmAJkzzACZAP8AmWYAAJlmMwCZM2YAmWaZAJlmzACZM/8AmZkzAJmZZgCZmZkAmZnMAJmZ
        /wCZzAAAmcwzAGbMZgCZzJkAmczMAJnM/wCZ/wAAmf8zAJnMZgCZ/5kAmf/MAJn//wDMAAAAmQAzAMwA
        ZgDMAJkAzADMAJkzAADMMzMAzDNmAMwzmQDMM8wAzDP/AMxmAADMZjMAmWZmAMxmmQDMZswAmWb/AMyZ
        AADMmTMAzJlmAMyZmQDMmcwAzJn/AMzMAADMzDMAzMxmAMzMmQDMzMwAzMz/AMz/AADM/zMAmf9mAMz/
        mQDM/8wAzP//AMwAMwD/AGYA/wCZAMwzAAD/MzMA/zNmAP8zmQD/M8wA/zP/AP9mAAD/ZjMAzGZmAP9m
        mQD/ZswAzGb/AP+ZAAD/mTMA/5lmAP+ZmQD/mcwA/5n/AP/MAAD/zDMA/8xmAP/MmQD/zMwA/8z/AP//
        MwDM/2YA//+ZAP//zABmZv8AZv9mAGb//wD/ZmYA/2b/AP//ZgAhAKUAX19fAHd3dwCGhoYAlpaWAMvL
        ywCysrIA19fXAN3d3QDj4+MA6urqAPHx8QD4+PgA8Pv/AKSgoACAgIAAAAD/AAD/AAAA//8A/wAAAP8A
        /wD//wAA////AAAAAAAAAAAAAAAAAAAAAAAA+fn5AAAA4/n5JAAAAAAAAPn5+SQAAOP5+fkAAAAAAADj
        +fkkAAAA+fn5AAAAAAAA4/n5+QAAAPn5+SQAAAAA+fn5+fn5+fn5+fn5+fn5JOPj4/n5+ePj4/n5+ePj
        4wAAAAD5+fkAAAD5+fkAAAAAAAAA+fn5JAAA+fn5JAAAAAAAAOP5+SQAAPn5+SQAAAAkJCQk+fkkJCT5
        +fkkJCQA+fn5+fn5+fn5+fn5+fn5JAAAAAD5+fkkAAD5+fkkAAAAAAAA4/n5JAAAAPn5JAAAAAAAAOP5
        +fkAAAD5+fkkAAAAAAAA+fn5AAAA4/n5JAD//wAAjh8AAIYfAACHHwAAhw8AAAAAAAAAAQAA448AAOGH
        AADhhwAAAAEAAAAAAADwwwAA8OMAAPDhAAD44QAA
</value>
  </data>
</root>